// <auto-generated />
using System;
using FinanSist.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanSist.Database.Migrations
{
    [DbContext(typeof(FinanSistContext))]
    partial class FinanSistContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FinanSist.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasComment("Nome da categoria");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("Gerenciador de estado que define qual é o tipo da categoria, sendo eles: 0 [Receita] e 1 [Despesa]");

                    b.HasKey("Id");

                    b.ToTable("Categoria", (string)null);

                    b.HasComment("Tabela reposável pelos registros das categorias");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Despesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("char(36)")
                        .HasComment("Identificador da categoria.");

                    b.Property<int>("CodigoInterno")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataDespesa")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data de pagamento da Despesa.");

                    b.Property<DateTime?>("DataPrevisao")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data de previsão de pagamento da Despesa.");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(200)")
                        .HasComment("Descrição da Despesa.");

                    b.Property<string>("DescricaoRepeticao")
                        .HasColumnType("varchar(210)")
                        .HasComment("Descrição referente a repetição da despesa.");

                    b.Property<bool>("Efetivado")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Controle de estado que define se o pagamento foi efetivado (despesa paga).");

                    b.Property<Guid?>("EntidadeId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasComment("Identificador da entidade.");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(200)")
                        .HasComment("Observações da Despesa.");

                    b.Property<int?>("PeriodoRepeticao")
                        .HasColumnType("int")
                        .HasComment("Periodo no qual a repetição vai existir sendo 1 -> Mensal e 2 -> Anual");

                    b.Property<int?>("QuantidadeRepeticao")
                        .HasColumnType("int")
                        .HasComment("Quantidade de repetição deve existir de uma determinada despesa");

                    b.Property<bool>("Repetir")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Controle de estado que define se a despesa deve repetir ou não.");

                    b.Property<decimal?>("Valor")
                        .IsRequired()
                        .HasColumnType("decimal(9,2)")
                        .HasComment("Valor da despesa.");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EntidadeId");

                    b.ToTable("Despesa", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.DespesaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DespesaId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasComment("Identificador da despesa");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("char(36)")
                        .HasComment("Identificador da tag");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("DespesaId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("unq1_DespesaTag");

                    b.ToTable("DespesaTag", (string)null);

                    b.HasComment("Tabela responsável por gerir a relação de Depesas e Tags");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Entidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(200)")
                        .HasComment("Descrição da entidade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasComment("Nome da entidade");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("UnqEntidadeNome");

                    b.ToTable("Entidade", (string)null);

                    b.HasComment("Tabela reposável pelos registros das entidades");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Sequencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasComment("Nome da sequência");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasComment("Número da sequência");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("UnqSequenciaNome");

                    b.ToTable("Sequencia", (string)null);

                    b.HasComment("Tabela responsável pelo controle de contadores (sequência)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(200)")
                        .HasComment("Descrição da Tag");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasComment("Nome da Tag");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("UndTagNome");

                    b.ToTable("Tag", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasComment("E-mail do usuário.");

                    b.Property<bool>("ExigirNovaSenha")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasComment("Nome do usuário.");

                    b.Property<string>("Permissao")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Permissão do usuário, sendo elas: Administrador e Padrao.");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(50)")
                        .HasComment("Validade do refresh token.");

                    b.Property<DateTime?>("RefreshTokenValidade")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Senha")
                        .HasColumnType("LONGTEXT")
                        .HasComment("Senha do usuário.");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasComment("Telefone do usuário.");

                    b.Property<string>("TokenSenha")
                        .HasColumnType("varchar(255)")
                        .HasComment("Token para alteração da senha.");

                    b.Property<DateTime?>("TokenSenhaValidade")
                        .HasColumnType("datetime(6)")
                        .HasComment("Validade do token de alteração de senha.");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UnqUsuarioEmail");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("UnqUsuarioRefreshToken");

                    b.HasIndex("TokenSenha")
                        .IsUnique()
                        .HasDatabaseName("UnqUsuarioTokenSenha");

                    b.ToTable("Usuario", (string)null);

                    b.HasComment("Tabela reposável por organizar os usuários.");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Despesa", b =>
                {
                    b.HasOne("FinanSist.Domain.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.HasOne("FinanSist.Domain.Entities.Entidade", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.DespesaTag", b =>
                {
                    b.HasOne("FinanSist.Domain.Entities.Despesa", "Despesa")
                        .WithMany("DespesaTag")
                        .HasForeignKey("DespesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanSist.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Despesa");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FinanSist.Domain.Entities.Despesa", b =>
                {
                    b.Navigation("DespesaTag");
                });
#pragma warning restore 612, 618
        }
    }
}
